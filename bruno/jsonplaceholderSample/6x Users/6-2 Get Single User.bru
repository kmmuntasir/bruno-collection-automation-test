meta {
  name: 6-2 Get Single User
  type: http
  seq: 2
}

get {
  url: {{baseUrl}}/users/1
  body: none
  auth: none
}

tests {
  test("Status should be 200", () => {
    expect(res.status).to.equal(200);
  });
  
  test("User ID should match requested ID", () => {
    expect(res.body.id).to.equal(1);
  });
  
  test("User should have all required properties", () => {
    expect(res.body).to.have.property("id");
    expect(res.body).to.have.property("name");
    expect(res.body).to.have.property("username");
    expect(res.body).to.have.property("email");
    expect(res.body).to.have.property("address");
    expect(res.body).to.have.property("phone");
    expect(res.body).to.have.property("website");
    expect(res.body).to.have.property("company");
  });
  
  test("Address should have nested properties", () => {
    expect(res.body.address).to.have.property("street");
    expect(res.body.address).to.have.property("suite");
    expect(res.body.address).to.have.property("city");
    expect(res.body.address).to.have.property("zipcode");
    expect(res.body.address).to.have.property("geo");
  });
  
  test("Company should have nested properties", () => {
    expect(res.body.company).to.have.property("name");
    expect(res.body.company).to.have.property("catchPhrase");
    expect(res.body.company).to.have.property("bs");
  });
}

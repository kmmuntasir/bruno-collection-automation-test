meta {
  name: 6-7 Update User
  type: http
  seq: 7
}

put {
  url: {{baseUrl}}/users/1
  body: json
  auth: none
}

body:json {
  {
    "id": 1,
    "name": "Updated Name",
    "username": "updatedusername",
    "email": "updated@example.com",
    "address": {
      "street": "Updated Street",
      "suite": "Updated Suite",
      "city": "Updated City",
      "zipcode": "54321",
      "geo": {
        "lat": "41.0000",
        "lng": "-75.0000"
      }
    },
    "phone": "555-987-6543",
    "website": "updated.com",
    "company": {
      "name": "Updated Company",
      "catchPhrase": "Updated catchphrase",
      "bs": "updated business"
    }
  }
}

tests {
  test("Status should be 200", () => {
    expect(res.status).to.equal(200);
  });
  
  test("User ID should match requested ID", () => {
    expect(res.body.id).to.equal(1);
  });
  
  test("Response body should match request data", () => {
    expect(res.body.name).to.equal("Updated Name");
    expect(res.body.username).to.equal("updatedusername");
    expect(res.body.email).to.equal("updated@example.com");
  });
  
  test("Response should have all required properties", () => {
    expect(res.body).to.have.property("id");
    expect(res.body).to.have.property("name");
    expect(res.body).to.have.property("username");
    expect(res.body).to.have.property("email");
    expect(res.body).to.have.property("address");
    expect(res.body).to.have.property("phone");
    expect(res.body).to.have.property("website");
    expect(res.body).to.have.property("company");
  });
}

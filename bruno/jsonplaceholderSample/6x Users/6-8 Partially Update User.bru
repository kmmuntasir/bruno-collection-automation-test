meta {
  name: 6-8 Partially Update User
  type: http
  seq: 8
}

patch {
  url: {{baseUrl}}/users/1
  body: json
  auth: none
}

body:json {
  {
    "email": "patched@example.com",
    "phone": "555-000-1234"
  }
}

tests {
  test("Status should be 200", () => {
    expect(res.status).to.equal(200);
  });
  
  test("User ID should match requested ID", () => {
    expect(res.body.id).to.equal(1);
  });
  
  test("Updated fields should match request", () => {
    expect(res.body.email).to.equal("patched@example.com");
    expect(res.body.phone).to.equal("555-000-1234");
  });
  
  test("Other fields should remain unchanged", () => {
    expect(res.body).to.have.property("name");
    expect(res.body).to.have.property("username");
    expect(res.body).to.have.property("address");
    expect(res.body).to.have.property("website");
    expect(res.body).to.have.property("company");
  });
  
  test("Response should have all required properties", () => {
    expect(res.body).to.have.property("id");
    expect(res.body).to.have.property("name");
    expect(res.body).to.have.property("username");
    expect(res.body).to.have.property("email");
    expect(res.body).to.have.property("address");
    expect(res.body).to.have.property("phone");
    expect(res.body).to.have.property("website");
    expect(res.body).to.have.property("company");
  });
}

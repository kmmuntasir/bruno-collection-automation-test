meta {
  name: Update Task - Only Title
  type: http
  seq: 21
}

put {
  url: {{baseUrl}}/tasks/{{testTaskId}}
  body: json
  auth: bearer
}

headers {
  Content-Type: application/json
  Accept: application/json
}

auth:bearer {
  token: {{authToken}}
}

body:json {
  {
    "title": "Updated Title Only"
  }
}

script:pre-request {
  // Ensure we have authentication token
  if (!bru.getEnvVar("authToken")) {
    throw new Error("Authentication token not found. Please login first.");
  }
  
  // Ensure we have a task ID to update
  const taskId = bru.getEnvVar("testTaskId") || bru.getVar("firstTaskId");
  if (!taskId) {
    throw new Error("No task ID found. Create a task first.");
  }
  
  console.log("Testing partial update (title only) for task:", taskId);
}

script:post-response {
  console.log("Partial update (title) status:", res.status);
  console.log("Response time:", res.responseTime + "ms");
  
  if (res.status === 200) {
    console.log("✅ Partial update successful");
    console.log("Updated title:", res.body.title);
  } else if (res.status === 404) {
    console.log("⚠️ Task not found - might have been deleted");
  } else {
    console.error("❌ Unexpected status:", res.status);
  }
}

tests {
  test("Should update task successfully or return not found", () => {
    expect([200, 404]).to.include(res.status);
  });
  
  test("Should return updated task object when successful", () => {
    if (res.status === 200) {
      expect(res.body).to.have.property("id");
      expect(res.body).to.have.property("title");
      expect(res.body).to.have.property("description");
      expect(res.body).to.have.property("status");
      expect(res.body).to.have.property("updatedAt");
    }
  });
  
  test("Should have updated title when successful", () => {
    if (res.status === 200) {
      expect(res.body.title).to.equal("Updated Title Only");
    }
  });
  
  test("Should preserve other fields when successful", () => {
    if (res.status === 200) {
      expect(res.body.description).to.be.a("string");
      expect(res.body.status).to.be.oneOf(["pending", "done"]);
    }
  });
  
  test("UpdatedAt should be modified when successful", () => {
    if (res.status === 200) {
      expect(res.body.updatedAt).to.be.a("string");
      expect(res.body.updatedAt).to.not.equal(res.body.createdAt);
    }
  });
  
  test("Response time should be reasonable", () => {
    expect(res.responseTime).to.be.below(2000);
  });
}

assert {
  res.responseTime: lt 2000
}

meta {
  name: Update Task Empty Title
  type: http
  seq: 23
}

put {
  url: {{baseUrl}}/tasks/{{testTaskId}}
  body: json
  auth: bearer
}

headers {
  Content-Type: application/json
  Accept: application/json
}

auth:bearer {
  token: {{authToken}}
}

body:json {
  {
    "title": ""
  }
}

script:pre-request {
  // Ensure we have authentication token
  if (!bru.getEnvVar("authToken")) {
    throw new Error("Authentication token not found. Please login first.");
  }
  
  // Ensure we have a task ID to update
  const taskId = bru.getEnvVar("testTaskId") || bru.getVar("firstTaskId");
  if (!taskId) {
    throw new Error("No task ID found. Create a task first.");
  }
  
  console.log("Testing update with empty title for task:", taskId);
}

script:post-response {
  console.log("Update task with empty title status:", res.status);
  console.log("Response time:", res.responseTime + "ms");
  
  if (res.status === 422) {
    console.log("✅ Empty title properly rejected");
  } else if (res.status === 404) {
    console.log("⚠️ Task not found - might have been deleted");
  } else {
    console.error("❌ Expected 422 but got:", res.status);
  }
}

tests {
  test("Should return 422 Unprocessable Entity or 404 if not found", () => {
    expect([404, 422]).to.include(res.status);
  });
  
  test("Should return error message about empty title when 422", () => {
    if (res.status === 422) {
      expect(res.body).to.have.property("error");
      expect(res.body.error).to.be.a("string");
      expect(res.body.error.toLowerCase()).to.contain("title");
    }
  });
  
  test("Should not update task when validation fails", () => {
    if (res.status === 422) {
      expect(res.body).to.not.have.property("id");
    }
  });
  
  test("Response time should be reasonable", () => {
    expect(res.responseTime).to.be.below(2000);
  });
}

assert {
  res.responseTime: lt 2000
}

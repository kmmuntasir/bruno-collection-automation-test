meta {
  name: Create Task
  type: http
  seq: 4
}

post {
  url: {{baseUrl}}/tasks
  body: json
  auth: bearer
}

headers {
  Content-Type: application/json
  Accept: application/json
}

auth:bearer {
  token: {{authToken}}
}

body:json {
  {
    "title": "Buy groceries",
    "description": "Get milk, bread, and eggs from the store",
    "status": "pending"
  }
}

vars:pre-request {
  taskTitle: Buy groceries
  timestamp: {{$timestamp}}
}

script:pre-request {
  // Ensure we have authentication token
  if (!bru.getEnvVar("authToken")) {
    throw new Error("Authentication token not found. Please login first.");
  }
  
  // Generate unique task title to avoid duplicates in testing
  const timestamp = Date.now();
  const uniqueTitle = `Task ${timestamp}`;
  bru.setVar("taskTitle", uniqueTitle);
  
  console.log("Creating task:", uniqueTitle);
}

script:post-response {
  // Log response details
  console.log("Create task status:", res.status);
  console.log("Response time:", res.responseTime + "ms");
  
  // Store task ID for subsequent requests
  if (res.status === 201 && res.body.id) {
    bru.setVar("testTaskId", res.body.id);
    bru.setEnvVar("testTaskId", res.body.id);
    console.log("✅ Task created successfully, ID:", res.body.id);
  } else {
    console.error("❌ Task creation failed:", res.body.error);
  }
}

tests {
  test("Should create task successfully", () => {
    expect(res.status).to.equal(201);
  });
  
  test("Should return task object", () => {
    expect(res.body).to.have.property("id");
    expect(res.body).to.have.property("userId");
    expect(res.body).to.have.property("title");
    expect(res.body).to.have.property("description");
    expect(res.body).to.have.property("status");
    expect(res.body).to.have.property("createdAt");
    expect(res.body).to.have.property("updatedAt");
  });
  
  test("Should have valid task ID", () => {
    expect(res.body.id).to.be.a("string");
    expect(res.body.id).to.have.length.above(10);
  });
  
  test("Should have correct user ID", () => {
    expect(res.body.userId).to.be.a("string");
    expect(res.body.userId).to.equal(bru.getVar("testUserId"));
  });
  
  test("Should have correct title", () => {
    expect(res.body.title).to.be.a("string");
    expect(res.body.title).to.have.length.above(0);
  });
  
  test("Should have valid status", () => {
    expect(res.body.status).to.be.oneOf(["pending", "done"]);
  });
  
  test("Should have valid timestamps", () => {
    expect(res.body.createdAt).to.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/);
    expect(res.body.updatedAt).to.match(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z$/);
  });
  
  test("Response time should be reasonable", () => {
    expect(res.responseTime).to.be.below(2000);
  });
}

assert {
  res.status: eq 201
  res.body.status: eq pending
  res.responseTime: lt 2000
}

meta {
  name: Get Tasks by Status
  type: http
  seq: 6
}

get {
  url: {{baseUrl}}/tasks?status=pending
  auth: bearer
}

headers {
  Accept: application/json
}

auth:bearer {
  token: {{authToken}}
}

script:pre-request {
  // Ensure we have authentication token
  if (!bru.getEnvVar("authToken")) {
    throw new Error("Authentication token not found. Please login first.");
  }
  
  console.log("Fetching tasks with status filter: pending");
}

script:post-response {
  // Log response details
  console.log("Get filtered tasks status:", res.status);
  console.log("Response time:", res.responseTime + "ms");
  console.log("Number of pending tasks:", Array.isArray(res.body) ? res.body.length : 0);
  
  if (res.status === 200) {
    console.log("✅ Filtered tasks fetched successfully");
  } else {
    console.error("❌ Failed to fetch filtered tasks:", res.body.error);
  }
}

tests {
  test("Should return filtered tasks successfully", () => {
    expect(res.status).to.equal(200);
  });
  
  test("Should return array of tasks", () => {
    expect(res.body).to.be.an("array");
  });
  
  test("All returned tasks should have pending status", () => {
    res.body.forEach(task => {
      expect(task.status).to.equal("pending");
    });
  });
  
  test("Each task should have required properties", () => {
    if (res.body.length > 0) {
      res.body.forEach(task => {
        expect(task).to.have.property("id");
        expect(task).to.have.property("userId");
        expect(task).to.have.property("title");
        expect(task).to.have.property("description");
        expect(task).to.have.property("status");
        expect(task).to.have.property("createdAt");
        expect(task).to.have.property("updatedAt");
      });
    }
  });
  
  test("All tasks should belong to authenticated user", () => {
    const userId = bru.getVar("testUserId");
    if (res.body.length > 0 && userId) {
      res.body.forEach(task => {
        expect(task.userId).to.equal(userId);
      });
    }
  });
  
  test("Response time should be reasonable", () => {
    expect(res.responseTime).to.be.below(2000);
  });
}

assert {
  res.status: eq 200
  res.body: isArray
  res.responseTime: lt 2000
}
